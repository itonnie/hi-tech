#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('hi-tech:server');
var http = require('http');
var Visitor = require("../models/visitors");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require("socket.io").listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

 //Sockets
 var nicknames = {};
 io.sockets.on("connection", (socket) => {

   var ip = socket.handshake.address;

   socket.on("locationinfo", (data) => {
     var newvisitor = new Visitor({
       ip: ip,
       isMobile: false,
       //change this
       coords: data.Position.coords
     });

     newvisitor.save((err,result) => {
       if(err) {
         console.log(err);
       } else {
         console.log(result);
       }
     });

     io.sockets.emit("loc", data);
   });

   socket.on("newcustomer", (data) => {
     if(data in nicknames) {
       io.sockets.emit("useradded", false);
     } else {
       socket.nickname = data;
       nicknames[socket.nickname] = socket.nickname;
       io.sockets.emit("useradded", true);
       io.sockets.emit("useradded", socket.nickname);
     }
   });

   //Show all users
   socket.on("clients", data => {
    io.sockets.emit("usernames", nicknames);
   });

   socket.on("message", data => {
       if(data.username in nicknames) {
         console.log(nicknames[socket.nickname])
        nicknames[socket.nickname].emit("data", "message here");
       } else {
         console.log("doesnt exits");
       }
   })

   function updateUsers() {
    io.sockets.emit("usernames", nicknames);
   }

   //On user disconnect
   socket.on("disconnect", data => {
     if(!socket.nickname) return;
     delete nicknames[socket.nickname];
     updateUsers();
   })
   
 });

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
